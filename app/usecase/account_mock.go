// Code generated by MockGen. DO NOT EDIT.
// Source: ./app/usecase/account.go

// Package usecase is a generated GoMock package.
package usecase

import (
	model "github.com/VLaroye/gasso-back/app/domain/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockAccountUsecase is a mock of AccountUsecase interface
type MockAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAccountUsecaseMockRecorder
}

// MockAccountUsecaseMockRecorder is the mock recorder for MockAccountUsecase
type MockAccountUsecaseMockRecorder struct {
	mock *MockAccountUsecase
}

// NewMockAccountUsecase creates a new mock instance
func NewMockAccountUsecase(ctrl *gomock.Controller) *MockAccountUsecase {
	mock := &MockAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountUsecase) EXPECT() *MockAccountUsecaseMockRecorder {
	return m.recorder
}

// ListAccounts mocks base method
func (m *MockAccountUsecase) ListAccounts() ([]*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAccounts")
	ret0, _ := ret[0].([]*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAccounts indicates an expected call of ListAccounts
func (mr *MockAccountUsecaseMockRecorder) ListAccounts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAccounts", reflect.TypeOf((*MockAccountUsecase)(nil).ListAccounts))
}

// GetAccountByID mocks base method
func (m *MockAccountUsecase) GetAccountByID(id string) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountByID", id)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByID indicates an expected call of GetAccountByID
func (mr *MockAccountUsecaseMockRecorder) GetAccountByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByID", reflect.TypeOf((*MockAccountUsecase)(nil).GetAccountByID), id)
}

// CreateAccount mocks base method
func (m *MockAccountUsecase) CreateAccount(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountUsecaseMockRecorder) CreateAccount(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountUsecase)(nil).CreateAccount), name)
}

// UpdateAccount mocks base method
func (m *MockAccountUsecase) UpdateAccount(id, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccount", id, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAccount indicates an expected call of UpdateAccount
func (mr *MockAccountUsecaseMockRecorder) UpdateAccount(id, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccount", reflect.TypeOf((*MockAccountUsecase)(nil).UpdateAccount), id, name)
}

// DeleteAccount mocks base method
func (m *MockAccountUsecase) DeleteAccount(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAccount", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAccount indicates an expected call of DeleteAccount
func (mr *MockAccountUsecaseMockRecorder) DeleteAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAccount", reflect.TypeOf((*MockAccountUsecase)(nil).DeleteAccount), id)
}
